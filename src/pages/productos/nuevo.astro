---
import "../../styles/global.css";
import Layout from "../../layouts/Layout.astro";
import GridProducto from "../../components/GridProducto.astro";
import productos from "../../../public/data/productos.json";

// Genera las rutas estáticas para cada categoría
export async function getStaticPaths() {
  const categorias = [...new Set(productos.map((p) => p.category))];

  return [
    // Ruta para todos los productos
    { params: { category: "todos" } },
    // Rutas para cada categoría con slugs amigables
    ...categorias.map((category) => ({
      params: { category: category.toLowerCase().replace(/\s+/g, "-") },
    })),
  ];
}

const { category } = Astro.params;
const categorySafe = category ?? "";

// Convertir el slug de vuelta al nombre original de la categoría
let categoriaOriginal = "";
if (category === "todos") {
  categoriaOriginal = "todos";
} else {
  const categoriaEncontrada = productos.find(
    (p) =>
      p.category.toLowerCase().replace(/\s+/g, "-") ===
      categorySafe.toLowerCase()
  );
  categoriaOriginal = categoriaEncontrada ? categoriaEncontrada.category : "";
}

// Filtrar productos
const productosFiltrados =
  category === "todos"
    ? productos
    : productos.filter((p) => p.category === categoriaOriginal);

// Título amigable
const titulo =
  category === "todos"
    ? "Todos los productos"
    : categoriaOriginal || "Categoría no encontrada";

// Obtener todas las categorías para la navegación
const todasLasCategorias = [...new Set(productos.map((item) => item.category))];

// Obtener marcas específicas de la categoría actual
const marcasDeCategoria = category === "todos" 
  ? [...new Set(productos.map((item) => item.marca))]
  : [...new Set(productosFiltrados.map((item) => item.marca))];

// Obtener rango de precios de la categoría actual
const preciosCategoria = productosFiltrados.map(p => p.price);
const minPrecioCategoria = Math.min(...preciosCategoria);
const maxPrecioCategoria = Math.max(...preciosCategoria);
---

<Layout title={`Categoría: ${titulo}`}>
  <main class="container mx-auto px-4 py-8 relative">
    <!-- Botón para abrir filtros (visible solo en móvil) -->
    <button id="open-filters" class="md:hidden fixed bottom-6 right-6 z-30 bg-blue-600 text-white p-4 rounded-full shadow-lg hover:bg-blue-700 transition-all transform hover:scale-110">
      <i class="fas fa-filter text-xl"></i>
    </button>

    <!-- Overlay para el modal -->
    <div id="filters-overlay" class="hidden fixed inset-0 bg-black bg-opacity-50 z-40"></div>

    <!-- Modal de filtros -->
    <aside id="filters-modal" class="fixed left-0 top-0 h-full w-80 bg-white shadow-xl z-50 transform -translate-x-full transition-transform duration-300 ease-in-out">
      <div class="flex flex-col h-full">
        <div class="flex justify-between items-center p-6 border-b">
          <h2 class="text-xl font-bold">Filtros</h2>
          <button id="close-filters" class="text-gray-500 hover:text-gray-700">
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>

        <div class="flex-1 overflow-y-auto p-6">
          <!-- Filtro por categoría -->
          <div class="mb-8">
            <h3 class="font-semibold mb-3 text-lg">Categorías</h3>
            <ul class="space-y-2">
              <li>
                <a 
                  href="/productos/todos" 
                  class={`block px-4 py-2 rounded-lg transition-colors ${category === 'todos' ? 'bg-blue-100 text-blue-600 font-semibold' : 'hover:bg-gray-100'}`}
                >
                  Todos los productos
                </a>
              </li>
              {todasLasCategorias.map((cat) => {
                const slug = cat.toLowerCase().replace(/\s+/g, "-");
                const isActive = cat === categoriaOriginal;
                return (
                  <li>
                    <a 
                      href={`/productos/${slug}`} 
                      class={`block px-4 py-2 rounded-lg transition-colors ${isActive ? 'bg-blue-100 text-blue-600 font-semibold' : 'hover:bg-gray-100'}`}
                    >
                      {cat}
                    </a>
                  </li>
                );
              })}
            </ul>
          </div>

          <!-- Filtro por marca -->
          <div class="mb-8">
            <h3 class="font-semibold mb-3 text-lg">Marcas</h3>
            <div class="space-y-2">
              {marcasDeCategoria.map(marca => (
                <div class="flex items-center">
                  <input 
                    type="checkbox" 
                    id={`marca-${marca}`}
                    value={marca}
                    class="marca-filter h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                  />
                  <label for={`marca-${marca}`} class="ml-2 text-gray-700 cursor-pointer">{marca}</label>
                </div>
              ))}
            </div>
          </div>

          <!-- Filtro por precio -->
          <div class="mb-8">
            <h3 class="font-semibold mb-3 text-lg">Rango de precios</h3>
            <div class="flex items-center justify-between mb-4">
              <span id="min-price-value" class="text-sm text-gray-600">S/. {minPrecioCategoria}</span>
              <span id="max-price-value" class="text-sm text-gray-600">S/. {maxPrecioCategoria}</span>
            </div>
            <div class="px-2 mb-4">
              <input 
                type="range" 
                id="price-range-min" 
                min={minPrecioCategoria} 
                max={maxPrecioCategoria} 
                value={minPrecioCategoria}
                class="w-full mb-4 slider"
              />
              <input 
                type="range" 
                id="price-range-max" 
                min={minPrecioCategoria} 
                max={maxPrecioCategoria} 
                value={maxPrecioCategoria}
                class="w-full slider"
              />
            </div>
            <div class="flex justify-between gap-2">
              <div class="flex-1">
                <label class="block text-sm text-gray-600 mb-1">Mínimo</label>
                <input 
                  type="number" 
                  id="min-price-input" 
                  min={minPrecioCategoria}
                  max={maxPrecioCategoria}
                  value={minPrecioCategoria}
                  class="w-full border rounded px-3 py-2 text-sm"
                />
              </div>
              <div class="flex-1">
                <label class="block text-sm text-gray-600 mb-1">Máximo</label>
                <input 
                  type="number" 
                  id="max-price-input" 
                  min={minPrecioCategoria}
                  max={maxPrecioCategoria}
                  value={maxPrecioCategoria}
                  class="w-full border rounded px-3 py-2 text-sm"
                />
              </div>
            </div>
          </div>

          <!-- Botón para limpiar filtros -->
          <div class="mb-4">
            <button id="reset-filters" class="w-full bg-gray-200 text-gray-800 py-2 rounded-lg font-semibold hover:bg-gray-300 transition-colors">
              Limpiar filtros
            </button>
          </div>
        </div>
      </div>
    </aside>

    <!-- Contenido principal -->
    <div class="md:grid md:grid-cols-4 gap-6">
      <!-- Sidebar de filtros (visible solo en desktop) -->
      <aside class="hidden md:block md:col-span-1">
        <div class="bg-white rounded-xl shadow-sm p-6 sticky top-6">
          <h2 class="text-xl font-bold mb-6">Filtros</h2>
          
          <!-- Filtro por categoría -->
          <div class="mb-8">
            <h3 class="font-semibold mb-3">Categorías</h3>
            <ul class="space-y-2">
              <li>
                <a 
                  href="/productos/todos" 
                  class={`block px-4 py-2 rounded-lg transition-colors ${category === 'todos' ? 'bg-blue-100 text-blue-600 font-semibold' : 'hover:bg-gray-100'}`}
                >
                  Todos los productos
                </a>
              </li>
              {todasLasCategorias.map((cat) => {
                const slug = cat.toLowerCase().replace(/\s+/g, "-");
                const isActive = cat === categoriaOriginal;
                return (
                  <li>
                    <a 
                      href={`/productos/${slug}`} 
                      class={`block px-4 py-2 rounded-lg transition-colors ${isActive ? 'bg-blue-100 text-blue-600 font-semibold' : 'hover:bg-gray-100'}`}
                    >
                      {cat}
                    </a>
                  </li>
                );
              })}
            </ul>
          </div>

          <!-- Filtro por marca -->
          <div class="mb-8">
            <h3 class="font-semibold mb-3">Marcas</h3>
            <div class="space-y-2 max-h-48 overflow-y-auto">
              {marcasDeCategoria.map(marca => (
                <div class="flex items-center">
                  <input 
                    type="checkbox" 
                    id={`desktop-marca-${marca}`}
                    value={marca}
                    class="marca-filter h-4 w-4 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
                  />
                  <label for={`desktop-marca-${marca}`} class="ml-2 text-gray-700 cursor-pointer">{marca}</label>
                </div>
              ))}
            </div>
          </div>

          <!-- Filtro por precio -->
          <div class="mb-8">
            <h3 class="font-semibold mb-3">Rango de precios</h3>
            <div class="flex items-center justify-between mb-4">
              <span id="desktop-min-price-value" class="text-sm text-gray-600">S/. {minPrecioCategoria}</span>
              <span id="desktop-max-price-value" class="text-sm text-gray-600">S/. {maxPrecioCategoria}</span>
            </div>
            <div class="px-2 mb-4">
              <input 
                type="range" 
                id="desktop-price-range-min" 
                min={minPrecioCategoria} 
                max={maxPrecioCategoria} 
                value={minPrecioCategoria}
                class="w-full mb-4 slider"
              />
              <input 
                type="range" 
                id="desktop-price-range-max" 
                min={minPrecioCategoria} 
                max={maxPrecioCategoria} 
                value={maxPrecioCategoria}
                class="w-full slider"
              />
            </div>
            <div class="flex justify-between gap-2">
              <div class="flex-1">
                <label class="block text-sm text-gray-600 mb-1">Mínimo</label>
                <input 
                  type="number" 
                  id="desktop-min-price-input" 
                  min={minPrecioCategoria}
                  max={maxPrecioCategoria}
                  value={minPrecioCategoria}
                  class="w-full border rounded px-3 py-2 text-sm"
                />
              </div>
              <div class="flex-1">
                <label class="block text-sm text-gray-600 mb-1">Máximo</label>
                <input 
                  type="number" 
                  id="desktop-max-price-input" 
                  min={minPrecioCategoria}
                  max={maxPrecioCategoria}
                  value={maxPrecioCategoria}
                  class="w-full border rounded px-3 py-2 text-sm"
                />
              </div>
            </div>
          </div>

          <!-- Botón para limpiar filtros -->
          <div>
            <button id="desktop-reset-filters" class="w-full bg-gray-200 text-gray-800 py-2 rounded-lg font-semibold hover:bg-gray-300 transition-colors">
              Limpiar filtros
            </button>
          </div>
        </div>
      </aside>

      <!-- Listado de productos -->
      <div class="md:col-span-3">
        <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
          <h1 class="text-3xl font-bold">{titulo}</h1>
          <p id="products-count" class="text-gray-600 mt-2 md:mt-0">
            Mostrando {productosFiltrados.length} producto{productosFiltrados.length !== 1 ? "s" : ""}
          </p>
        </div>

        <div id="productos-container">
          {productosFiltrados.length > 0 ? (
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
              {productosFiltrados.map(producto => (
                <article 
                  class="producto-card bg-white rounded-lg shadow-md overflow-hidden hover:shadow-xl transition-all duration-300 hover:-translate-y-1"
                  data-category={producto.category}
                  data-marca={producto.marca}
                  data-price={producto.price}
                >
                  <div class="relative overflow-hidden h-48">
                    <img 
                      src={producto.image}
                      alt={producto.title}
                      class="w-full h-full object-cover transition-transform duration-500 hover:scale-105"
                      loading="lazy"
                    />
                    <span class="absolute top-2 left-2 bg-blue-600 text-white text-xs px-2 py-1 rounded-full">
                      {producto.category}
                    </span>
                  </div>
                  <div class="p-4">
                    <h3 class="text-lg font-semibold mb-2 line-clamp-2">{producto.title}</h3>
                    <p class="text-gray-600 text-sm mb-4 line-clamp-2">{producto.description}</p>
                    <div class="flex justify-between items-center">
                      <div>
                        <span class="text-xl font-bold text-blue-600">S/. {producto.price.toFixed(2)}</span>
                        {producto.price > 1000 && (
                          <span class="block text-xs text-green-600">Envío gratis</span>
                        )}
                      </div>
                      <button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                        <i class="fas fa-cart-plus mr-1"></i> Agregar
                      </button>
                    </div>
                  </div>
                </article>
              ))}
            </div>
          ) : (
            <div class="text-center py-12 bg-white rounded-lg shadow-sm">
              <lottie-player src="https://assets1.lottiefiles.com/packages/lf20_kcsr6fcp.json" background="transparent" speed="1" style="width: 200px; height: 200px; margin: 0 auto;" loop autoplay></lottie-player>
              <h3 class="text-xl font-semibold text-gray-800 mt-4">No hay productos en esta categoría</h3>
              <p class="text-gray-600 mt-2 mb-6">Explora nuestras otras categorías</p>
              <a
                href="/productos/todos"
                class="inline-block bg-blue-600 text-white px-6 py-2 rounded-lg font-semibold hover:bg-blue-700 transition-colors"
              >
                Ver todos los productos
              </a>
            </div>
          )}
        </div>

        <!-- Mensaje cuando no hay productos después de filtrar -->
        <div id="no-products" class="hidden text-center py-12 bg-white rounded-lg shadow-sm">
          <lottie-player src="https://assets1.lottiefiles.com/packages/lf20_kcsr6fcp.json" background="transparent" speed="1" style="width: 200px; height: 200px; margin: 0 auto;" loop autoplay></lottie-player>
          <h3 class="text-xl font-semibold text-gray-800 mt-4">No hay productos disponibles</h3>
          <p class="text-gray-600 mt-2 mb-6">No se encontraron productos con los filtros seleccionados</p>
          <button id="reset-filters-btn" class="bg-blue-600 text-white px-6 py-2 rounded-lg font-semibold hover:bg-blue-700 transition-colors">
            Limpiar filtros
          </button>
        </div>
      </div>
    </div>
  </main>

  <script define:vars={{ 
  minPrecioCategoria, 
  maxPrecioCategoria,
  productosFiltrados: productosFiltrados.length 
}}>
  document.addEventListener('DOMContentLoaded', function() {
    // Elementos del modal
    const openFiltersBtn = document.getElementById('open-filters');
    const closeFiltersBtn = document.getElementById('close-filters');
    const filtersModal = document.getElementById('filters-modal');
    const filtersOverlay = document.getElementById('filters-overlay');
    
    // Productos
    const productCards = document.querySelectorAll('.producto-card');
    const noProductsMessage = document.getElementById('no-products');
    const productsContainer = document.querySelector('#productos-container .grid');
    const productsCount = document.getElementById('products-count');
    
    // Abrir modal
    function openFilters() {
      filtersModal.classList.remove('-translate-x-full');
      filtersOverlay.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }
    
    // Cerrar modal
    function closeFilters() {
      filtersModal.classList.add('-translate-x-full');
      filtersOverlay.classList.add('hidden');
      document.body.style.overflow = '';
    }
    
    // Event listeners para abrir/cerrar modal
    openFiltersBtn?.addEventListener('click', openFilters);
    closeFiltersBtn?.addEventListener('click', closeFilters);
    filtersOverlay?.addEventListener('click', closeFilters);
    
    // Función para validar que el precio mínimo no supere el máximo
    function validatePriceRange(minVal, maxVal, isDesktop = false) {
      const prefix = isDesktop ? 'desktop-' : '';
      const minRange = document.getElementById(`${prefix}price-range-min`);
      const maxRange = document.getElementById(`${prefix}price-range-max`);
      const minInput = document.getElementById(`${prefix}min-price-input`);
      const maxInput = document.getElementById(`${prefix}max-price-input`);
      
      // Asegurar que min no sea mayor que max
      if (minVal > maxVal) {
        if (isDesktop) {
          minRange.value = maxVal;
          minInput.value = maxVal;
          minVal = maxVal;
        } else {
          maxRange.value = minVal;
          maxInput.value = minVal;
          maxVal = minVal;
        }
      }
      
      return { min: minVal, max: maxVal };
    }
    
    // Función para actualizar los valores mostrados
    function updatePriceDisplay(minVal, maxVal, isDesktop = false) {
      const prefix = isDesktop ? 'desktop-' : '';
      const minDisplay = document.getElementById(`${prefix}min-price-value`);
      const maxDisplay = document.getElementById(`${prefix}max-price-value`);
      
      if (minDisplay) minDisplay.textContent = `S/. ${minVal.toFixed(2)}`;
      if (maxDisplay) maxDisplay.textContent = `S/. ${maxVal.toFixed(2)}`;
    }
    
    // Función para sincronizar controles de precio
    function syncPriceControls(sourcePrefix, targetPrefix) {
      const sourceMinRange = document.getElementById(`${sourcePrefix}price-range-min`);
      const sourceMaxRange = document.getElementById(`${sourcePrefix}price-range-max`);
      const targetMinRange = document.getElementById(`${targetPrefix}price-range-min`);
      const targetMaxRange = document.getElementById(`${targetPrefix}price-range-max`);
      const targetMinInput = document.getElementById(`${targetPrefix}min-price-input`);
      const targetMaxInput = document.getElementById(`${targetPrefix}max-price-input`);
      
      if (sourceMinRange && targetMinRange) {
        targetMinRange.value = sourceMinRange.value;
        targetMinInput.value = sourceMinRange.value;
      }
      if (sourceMaxRange && targetMaxRange) {
        targetMaxRange.value = sourceMaxRange.value;
        targetMaxInput.value = sourceMaxRange.value;
      }
      
      updatePriceDisplay(
        parseFloat(sourceMinRange?.value || minPrecioCategoria),
        parseFloat(sourceMaxRange?.value || maxPrecioCategoria),
        targetPrefix === 'desktop-'
      );
    }
    
    // Función para filtrar productos
    function filterProducts() {
      // Obtener marcas seleccionadas
      const selectedMarcas = [];
      document.querySelectorAll('.marca-filter:checked').forEach(checkbox => {
        selectedMarcas.push(checkbox.value);
      });
      
      // Obtener rango de precios (usar valores de desktop como referencia)
      const desktopMinInput = document.getElementById('desktop-min-price-input');
      const desktopMaxInput = document.getElementById('desktop-max-price-input');
      const mobileMinInput = document.getElementById('min-price-input');
      const mobileMaxInput = document.getElementById('max-price-input');
      
      const minPrice = parseFloat(desktopMinInput?.value || mobileMinInput?.value || minPrecioCategoria);
      const maxPrice = parseFloat(desktopMaxInput?.value || mobileMaxInput?.value || maxPrecioCategoria);
      
      let visibleCount = 0;
      
      productCards.forEach(card => {
        const price = parseFloat(card.getAttribute('data-price'));
        const marca = card.getAttribute('data-marca');
        
        // Verificar si cumple con los filtros
        const matchesMarca = selectedMarcas.length === 0 || selectedMarcas.includes(marca);
        const matchesPrice = price >= minPrice && price <= maxPrice;
        
        if (matchesMarca && matchesPrice) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });
      
      // Actualizar contador de productos
      if (productsCount) {
        productsCount.textContent = `Mostrando ${visibleCount} producto${visibleCount !== 1 ? 's' : ''}`;
      }
      
      // Mostrar/ocultar mensaje de no productos
      if (visibleCount === 0) {
        if (productsContainer) productsContainer.style.display = 'none';
        if (noProductsMessage) noProductsMessage.classList.remove('hidden');
      } else {
        if (productsContainer) productsContainer.style.display = 'grid';
        if (noProductsMessage) noProductsMessage.classList.add('hidden');
      }
    }
    
    // Función para resetear filtros
    function resetFilters() {
      // Desmarcar todos los checkboxes
      document.querySelectorAll('.marca-filter').forEach(checkbox => {
        checkbox.checked = false;
      });
      
      // Resetear controles de precio para móvil
      const mobileMinRange = document.getElementById('price-range-min');
      const mobileMaxRange = document.getElementById('price-range-max');
      const mobileMinInput = document.getElementById('min-price-input');
      const mobileMaxInput = document.getElementById('max-price-input');
      
      if (mobileMinRange) mobileMinRange.value = minPrecioCategoria;
      if (mobileMaxRange) mobileMaxRange.value = maxPrecioCategoria;
      if (mobileMinInput) mobileMinInput.value = minPrecioCategoria;
      if (mobileMaxInput) mobileMaxInput.value = maxPrecioCategoria;
      
      // Resetear controles de precio para desktop
      const desktopMinRange = document.getElementById('desktop-price-range-min');
      const desktopMaxRange = document.getElementById('desktop-price-range-max');
      const desktopMinInput = document.getElementById('desktop-min-price-input');
      const desktopMaxInput = document.getElementById('desktop-max-price-input');
      
      if (desktopMinRange) desktopMinRange.value = minPrecioCategoria;
      if (desktopMaxRange) desktopMaxRange.value = maxPrecioCategoria;
      if (desktopMinInput) desktopMinInput.value = minPrecioCategoria;
      if (desktopMaxInput) desktopMaxInput.value = maxPrecioCategoria;
      
      // Actualizar displays
      updatePriceDisplay(minPrecioCategoria, maxPrecioCategoria, false);
      updatePriceDisplay(minPrecioCategoria, maxPrecioCategoria, true);
      
      // Filtrar productos
      filterProducts();
    }
    
    // Configurar event listeners para filtros automáticos
    function setupAutoFilters(prefix = '') {
      // Event listeners para controles de precio
      const minRange = document.getElementById(`${prefix}price-range-min`);
      const maxRange = document.getElementById(`${prefix}price-range-max`);
      const minInput = document.getElementById(`${prefix}min-price-input`);
      const maxInput = document.getElementById(`${prefix}max-price-input`);
      
      if (minRange) {
        minRange.addEventListener('input', () => {
          const validated = validatePriceRange(
            parseFloat(minRange.value),
            parseFloat(maxRange.value),
            prefix === 'desktop-'
          );
          minInput.value = validated.min;
          updatePriceDisplay(validated.min, validated.max, prefix === 'desktop-');
          
          // Sincronizar con el otro conjunto de controles
          const otherPrefix = prefix === 'desktop-' ? '' : 'desktop-';
          syncPriceControls(prefix, otherPrefix);
          
          filterProducts();
        });
      }
      
      if (maxRange) {
        maxRange.addEventListener('input', () => {
          const validated = validatePriceRange(
            parseFloat(minRange.value),
            parseFloat(maxRange.value),
            prefix === 'desktop-'
          );
          maxInput.value = validated.max;
          updatePriceDisplay(validated.min, validated.max, prefix === 'desktop-');
          
          // Sincronizar con el otro conjunto de controles
          const otherPrefix = prefix === 'desktop-' ? '' : 'desktop-';
          syncPriceControls(prefix, otherPrefix);
          
          filterProducts();
        });
      }
      
      if (minInput) {
        minInput.addEventListener('change', () => {
          const value = Math.max(minPrecioCategoria, parseFloat(minInput.value) || minPrecioCategoria);
          const validated = validatePriceRange(value, parseFloat(maxRange.value), prefix === 'desktop-');
          
          minRange.value = validated.min;
          minInput.value = validated.min;
          updatePriceDisplay(validated.min, validated.max, prefix === 'desktop-');
          
          // Sincronizar con el otro conjunto de controles
          const otherPrefix = prefix === 'desktop-' ? '' : 'desktop-';
          syncPriceControls(prefix, otherPrefix);
          
          filterProducts();
        });
      }
      
      if (maxInput) {
        maxInput.addEventListener('change', () => {
          const value = Math.min(maxPrecioCategoria, parseFloat(maxInput.value) || maxPrecioCategoria);
          const validated = validatePriceRange(parseFloat(minRange.value), value, prefix === 'desktop-');
          
          maxRange.value = validated.max;
          maxInput.value = validated.max;
          updatePriceDisplay(validated.min, validated.max, prefix === 'desktop-');
          
          // Sincronizar con el otro conjunto de controles
          const otherPrefix = prefix === 'desktop-' ? '' : 'desktop-';
          syncPriceControls(prefix, otherPrefix);
          
          filterProducts();
        });
      }
    }
    
    // Configurar eventos para los botones de reset
    document.getElementById('desktop-reset-filters')?.addEventListener('click', resetFilters);
    document.getElementById('reset-filters')?.addEventListener('click', resetFilters);
    document.getElementById('reset-filters-btn')?.addEventListener('click', resetFilters);
    
    // Configurar eventos para los checkboxes de marca
    document.querySelectorAll('.marca-filter').forEach(checkbox => {
      checkbox.addEventListener('change', () => {
        // Sincronizar checkboxes entre móvil y desktop
        const id = checkbox.id;
        let otherId, otherCheckbox;
        
        if (id.includes('desktop-')) {
          otherId = id.replace('desktop-', '');
          otherCheckbox = document.getElementById(otherId);
        } else {
          otherId = 'desktop-' + id;
          otherCheckbox = document.getElementById(otherId);
        }
        
        if (otherCheckbox) {
          otherCheckbox.checked = checkbox.checked;
        }
        
        filterProducts();
      });
    });
    
    // Inicializar filtros para ambas vistas
    setupAutoFilters(); // Móvil
    setupAutoFilters('desktop-'); // Escritorio
    
    // Aplicar filtros iniciales
    filterProducts();
  });
</script>

</Layaout>